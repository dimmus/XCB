inc_xcb += include_directories('.')

f_check += ['le32toh']
h_check += ['endian.h', 'sys/endian.h', 'sys/byteorder.h', 'libkern/OSByteOrder.h']

conf.set_quoted('XCURSORPATH', '~/.local/share/icons:~/.icons:@0@/icons:@0@/pixmaps'.format(dir_data))

dep_int_cursor = [xcb, render, renderutil, image]

src = files(
  'cursor.c',
  # 'shape_to_id.c', # generated by gperf`
  'load_cursor.c',
  'parse_cursor_file.c',
)

lib = library('xcb-util-cursor', src,
  include_directories: inc_xcb,
  dependencies: dep_int_cursor,
  version: '0.0.0',
  install: true,
)

cursor = declare_dependency(
  link_with: lib,
  include_directories: inc_xcb,
)

pkg.generate(lib,
  name: 'XCB cursor library',
  description: 'XCB cursor utility library',
  version: '0.1.5',
  requires: 'xcb',
  requires_private: ['xcb-render', 'xcb-renderutil', 'xcb-image'],
)

gperf = find_program('gperf', required: false)

# TODO: We cannot use --pic because then the gperf-generated code does not compile :-/
# GPERFFLAGS = --includes --struct-type --language=ANSI-C --switch=1
# CLEANFILES = shape_to_id.c

# shape_to_id.c: shape_to_id.gperf
# 	$(AM_V_GEN)if $(GPERF) $(GPERFFLAGS) $< >$@t; then \
# 	  mv $@t $@; \
# 	elif $(GPERF) --version >/dev/null 2>&1; then \
# 	  rm $@t; \
# 	  exit 1; \
# 	elif test -f $@; then \
# 	  rm $@t; \
# 	  touch $@; \
# 	else \
# 	  rm $@t; \
# 	  exit 1; \
# 	fi